/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type RedeemedRecorded = ContractEventLog<{
  index: string;
  from: string;
  to: string;
  amtbMxx: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RedeemedSuccess = ContractEventLog<{
  index: string;
  from: string;
  to: string;
  amtbMxx: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface MxxConverterRedemption extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MxxConverterRedemption;
  clone(): MxxConverterRedemption;
  methods: {
    approveRedeem(_id: number | string): NonPayableTransactionObject<void>;

    recordRedeem(
      _id: number | string,
      _fromAddress: string,
      _toBscAddress: string,
      _mxxAmt: number | string,
      _feePcnt: number | string
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setPaused(_pause: boolean): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    allRedemptions(
      arg0: number | string
    ): NonPayableTransactionObject<{
      amtMxx: string;
      amtbMxx: string;
      feePcnt: string;
      fromAddress: string;
      toAddress: string;
      time: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    availablebMxxAmt(): NonPayableTransactionObject<string>;

    bMxxTokenAddress(): NonPayableTransactionObject<string>;

    CONVERT_RATE(): NonPayableTransactionObject<string>;

    COOL_DOWN(): NonPayableTransactionObject<string>;

    count(): NonPayableTransactionObject<string>;

    isOwner(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    paused(): NonPayableTransactionObject<boolean>;

    pauserAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    RedeemedRecorded(cb?: Callback<RedeemedRecorded>): EventEmitter;
    RedeemedRecorded(
      options?: EventOptions,
      cb?: Callback<RedeemedRecorded>
    ): EventEmitter;

    RedeemedSuccess(cb?: Callback<RedeemedSuccess>): EventEmitter;
    RedeemedSuccess(
      options?: EventOptions,
      cb?: Callback<RedeemedSuccess>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "RedeemedRecorded", cb: Callback<RedeemedRecorded>): void;
  once(
    event: "RedeemedRecorded",
    options: EventOptions,
    cb: Callback<RedeemedRecorded>
  ): void;

  once(event: "RedeemedSuccess", cb: Callback<RedeemedSuccess>): void;
  once(
    event: "RedeemedSuccess",
    options: EventOptions,
    cb: Callback<RedeemedSuccess>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
