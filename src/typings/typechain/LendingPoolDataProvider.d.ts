/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface LendingPoolDataProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LendingPoolDataProvider;
  clone(): LendingPoolDataProvider;
  methods: {
    DATA_PROVIDER_REVISION(): NonPayableTransactionObject<string>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(): NonPayableTransactionObject<string>;

    addressesProvider(): NonPayableTransactionObject<string>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: number | string
    ): NonPayableTransactionObject<boolean>;

    calculateCollateralNeededInBNB(
      _reserve: string,
      _amount: number | string,
      _fee: number | string,
      _userCurrentBorrowBalanceTH: number | string,
      _userCurrentFeesBNB: number | string,
      _userCurrentLtv: number | string
    ): NonPayableTransactionObject<string>;

    calculateUserGlobalData(
      _user: string
    ): NonPayableTransactionObject<{
      totalLiquidityBalanceBNB: string;
      totalCollateralBalanceBNB: string;
      totalBorrowBalanceBNB: string;
      totalFeesBNB: string;
      currentLtv: string;
      currentLiquidationThreshold: string;
      healthFactor: string;
      healthFactorBelowThreshold: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
    }>;

    core(): NonPayableTransactionObject<string>;

    getHealthFactorLiquidationThreshold(): NonPayableTransactionObject<string>;

    getReserveConfigurationData(
      _reserve: string
    ): NonPayableTransactionObject<{
      ltv: string;
      liquidationThreshold: string;
      liquidationBonus: string;
      rateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    getReserveData(
      _reserve: string
    ): NonPayableTransactionObject<{
      totalLiquidity: string;
      availableLiquidity: string;
      totalBorrowsStable: string;
      totalBorrowsVariable: string;
      liquidityRate: string;
      variableBorrowRate: string;
      stableBorrowRate: string;
      averageStableBorrowRate: string;
      utilizationRate: string;
      liquidityIndex: string;
      variableBorrowIndex: string;
      mTokenAddress: string;
      lastUpdateTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
      12: string;
    }>;

    getUserAccountData(
      _user: string
    ): NonPayableTransactionObject<{
      totalLiquidityBNB: string;
      totalCollateralBNB: string;
      totalBorrowsBNB: string;
      totalFeesBNB: string;
      availableBorrowsBNB: string;
      currentLiquidationThreshold: string;
      ltv: string;
      healthFactor: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<{
      currentmTokenBalance: string;
      currentBorrowBalance: string;
      principalBorrowBalance: string;
      borrowRateMode: string;
      borrowRate: string;
      liquidityRate: string;
      originationFee: string;
      variableBorrowIndex: string;
      lastUpdateTimestamp: string;
      usageAsCollateralEnabled: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: boolean;
    }>;

    initialize(_addressesProvider: string): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
