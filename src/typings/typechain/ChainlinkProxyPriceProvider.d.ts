/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AssetSourceUpdated = ContractEventLog<{
  asset: string;
  source: string;
  0: string;
  1: string;
}>;
export type FallbackOracleUpdated = ContractEventLog<{
  fallbackOracle: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface ChainlinkProxyPriceProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ChainlinkProxyPriceProvider;
  clone(): ChainlinkProxyPriceProvider;
  methods: {
    getAssetPrice(_asset: string): NonPayableTransactionObject<string>;

    getAssetsPrices(_assets: string[]): NonPayableTransactionObject<string[]>;

    getFallbackOracle(): NonPayableTransactionObject<string>;

    getSourceOfAsset(_asset: string): NonPayableTransactionObject<string>;

    isOwner(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAssetSources(
      _assets: string[],
      _sources: string[]
    ): NonPayableTransactionObject<void>;

    setFallbackOracle(
      _fallbackOracle: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    AssetSourceUpdated(cb?: Callback<AssetSourceUpdated>): EventEmitter;
    AssetSourceUpdated(
      options?: EventOptions,
      cb?: Callback<AssetSourceUpdated>
    ): EventEmitter;

    FallbackOracleUpdated(cb?: Callback<FallbackOracleUpdated>): EventEmitter;
    FallbackOracleUpdated(
      options?: EventOptions,
      cb?: Callback<FallbackOracleUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AssetSourceUpdated", cb: Callback<AssetSourceUpdated>): void;
  once(
    event: "AssetSourceUpdated",
    options: EventOptions,
    cb: Callback<AssetSourceUpdated>
  ): void;

  once(
    event: "FallbackOracleUpdated",
    cb: Callback<FallbackOracleUpdated>
  ): void;
  once(
    event: "FallbackOracleUpdated",
    options: EventOptions,
    cb: Callback<FallbackOracleUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
