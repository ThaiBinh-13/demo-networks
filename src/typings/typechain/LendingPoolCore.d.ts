/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ReserveUpdated = ContractEventLog<{
  reserve: string;
  liquidityRate: string;
  stableBorrowRate: string;
  variableBorrowRate: string;
  liquidityIndex: string;
  variableBorrowIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface LendingPoolCore extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LendingPoolCore;
  clone(): LendingPoolCore;
  methods: {
    CORE_REVISION(): NonPayableTransactionObject<string>;

    activateReserve(_reserve: string): NonPayableTransactionObject<void>;

    addressesProvider(): NonPayableTransactionObject<string>;

    deactivateReserve(_reserve: string): NonPayableTransactionObject<void>;

    disableBorrowingOnReserve(
      _reserve: string
    ): NonPayableTransactionObject<void>;

    disableReserveAsCollateral(
      _reserve: string
    ): NonPayableTransactionObject<void>;

    disableReserveStableBorrowRate(
      _reserve: string
    ): NonPayableTransactionObject<void>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean
    ): NonPayableTransactionObject<void>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: number | string,
      _liquidationThreshold: number | string,
      _liquidationBonus: number | string
    ): NonPayableTransactionObject<void>;

    enableReserveStableBorrowRate(
      _reserve: string
    ): NonPayableTransactionObject<void>;

    feeProvider(): NonPayableTransactionObject<string>;

    freezeReserve(_reserve: string): NonPayableTransactionObject<void>;

    getReserveAvailableLiquidity(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveConfiguration(
      _reserve: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    getReserveCurrentAverageStableBorrowRate(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveCurrentLiquidityRate(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveCurrentStableBorrowRate(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveCurrentVariableBorrowRate(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveDecimals(_reserve: string): NonPayableTransactionObject<string>;

    getReserveInterestRateStrategyAddress(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveIsActive(_reserve: string): NonPayableTransactionObject<boolean>;

    getReserveIsFreezed(_reserve: string): NonPayableTransactionObject<boolean>;

    getReserveIsStableBorrowRateEnabled(
      _reserve: string
    ): NonPayableTransactionObject<boolean>;

    getReserveLastUpdate(_reserve: string): NonPayableTransactionObject<string>;

    getReserveLiquidationBonus(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveLiquidationThreshold(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveLiquidityCumulativeIndex(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveNormalizedIncome(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveTotalBorrows(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveTotalBorrowsStable(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveTotalBorrowsVariable(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveTotalLiquidity(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveUtilizationRate(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReservemTokenAddress(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getReserves(): NonPayableTransactionObject<string[]>;

    getTotalmTokenSupply(_reserve: string): NonPayableTransactionObject<string>;

    getUserBasicReserveData(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    getUserBorrowBalances(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getUserCurrentBorrowRateMode(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserLastUpdate(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserOriginationFee(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserStakedTokenBalance(
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserUnderlyingAssetBalance(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUsermTokenBalance(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    initReserve(
      _reserve: string,
      _mTokenAddress: string,
      _decimals: number | string,
      _interestRateStrategyAddress: string
    ): NonPayableTransactionObject<void>;

    initialize(_addresessProvider: string): NonPayableTransactionObject<void>;

    isReserveBorrowingEnabled(
      _reserve: string
    ): NonPayableTransactionObject<boolean>;

    isReserveUsageAsCollateralEnabled(
      _reserve: string
    ): NonPayableTransactionObject<boolean>;

    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: number | string
    ): NonPayableTransactionObject<boolean>;

    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string
    ): NonPayableTransactionObject<boolean>;

    lendingPoolAddress(): NonPayableTransactionObject<string>;

    liquidateFee(
      _token: string,
      _amount: number | string
    ): PayableTransactionObject<void>;

    parametersProvider(): NonPayableTransactionObject<string>;

    refreshConfiguration(): NonPayableTransactionObject<void>;

    removeLastAddedReserve(
      _reserveToRemove: string
    ): NonPayableTransactionObject<void>;

    reservesList(arg0: number | string): NonPayableTransactionObject<string>;

    rewardManager(): NonPayableTransactionObject<string>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: number | string
    ): NonPayableTransactionObject<void>;

    setReserveDecimals(
      _reserve: string,
      _decimals: number | string
    ): NonPayableTransactionObject<void>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string
    ): NonPayableTransactionObject<void>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: number | string
    ): NonPayableTransactionObject<void>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: number | string
    ): NonPayableTransactionObject<void>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _user: string,
      _useAsCollateral: boolean
    ): NonPayableTransactionObject<void>;

    transferToFeeCollectionAddress(
      _token: string,
      _user: string,
      _amount: number | string,
      _transferFromCore: boolean
    ): PayableTransactionObject<void>;

    transferToReserve(
      _reserve: string,
      _user: string,
      _amount: number | string
    ): PayableTransactionObject<void>;

    transferToUser(
      _reserve: string,
      _user: string,
      _amount: number | string
    ): NonPayableTransactionObject<void>;

    unfreezeReserve(_reserve: string): NonPayableTransactionObject<void>;

    updateStateOnBorrow(
      _reserve: string,
      _user: string,
      _amountBorrowed: number | string,
      _borrowFee: number | string,
      _rateMode: number | string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    updateStateOnDeposit(
      _reserve: string,
      _user: string,
      _amount: number | string,
      _isFirstDeposit: boolean
    ): NonPayableTransactionObject<void>;

    updateStateOnFlashLoan(_reserve: string): NonPayableTransactionObject<void>;

    updateStateOnLiquidation(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: number | string,
      _collateralToLiquidate: number | string,
      _feeLiquidated: number | string,
      _liquidatedCollateralForFee: number | string,
      _balanceIncrease: number | string,
      _liquidatorReceivesMToken: boolean
    ): NonPayableTransactionObject<void>;

    updateStateOnRebalance(
      _reserve: string,
      _user: string,
      _balanceIncrease: number | string
    ): NonPayableTransactionObject<string>;

    updateStateOnRedeem(
      _reserve: string,
      _user: string,
      _amountRedeemed: number | string,
      _userRedeemedEverything: boolean
    ): NonPayableTransactionObject<void>;

    updateStateOnRepay(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: number | string,
      _originationFeeRepaid: number | string,
      _balanceIncrease: number | string,
      _repaidWholeLoan: boolean
    ): NonPayableTransactionObject<void>;

    updateStateOnSwapRate(
      _reserve: string,
      _user: string,
      _principalBorrowBalance: number | string,
      _compoundedBorrowBalance: number | string,
      _balanceIncrease: number | string,
      _currentRateMode: number | string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;
  };
  events: {
    ReserveUpdated(cb?: Callback<ReserveUpdated>): EventEmitter;
    ReserveUpdated(
      options?: EventOptions,
      cb?: Callback<ReserveUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ReserveUpdated", cb: Callback<ReserveUpdated>): void;
  once(
    event: "ReserveUpdated",
    options: EventOptions,
    cb: Callback<ReserveUpdated>
  ): void;
}
