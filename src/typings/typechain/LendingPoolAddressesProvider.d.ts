/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FeeProviderUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type GovRewardVaultUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolConfiguratorUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolCoreUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolDataProviderUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolLiquidationManagerUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolManagerUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolParametersProviderUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingPoolUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LendingRateOracleUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type LiquidityRewardVaultUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PriceOracleUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type ProxyCreated = ContractEventLog<{
  id: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type RewardManagerUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type SafetyRewardVaultUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type StakingTokenUpdated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;

export interface LendingPoolAddressesProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LendingPoolAddressesProvider;
  clone(): LendingPoolAddressesProvider;
  methods: {
    getAddress(_key: string | number[]): NonPayableTransactionObject<string>;

    getFeeProvider(): NonPayableTransactionObject<string>;

    getGovRewardVault(): NonPayableTransactionObject<string>;

    getLendingPool(): NonPayableTransactionObject<string>;

    getLendingPoolConfigurator(): NonPayableTransactionObject<string>;

    getLendingPoolCore(): NonPayableTransactionObject<string>;

    getLendingPoolDataProvider(): NonPayableTransactionObject<string>;

    getLendingPoolLiquidationManager(): NonPayableTransactionObject<string>;

    getLendingPoolManager(): NonPayableTransactionObject<string>;

    getLendingPoolParametersProvider(): NonPayableTransactionObject<string>;

    getLendingRateOracle(): NonPayableTransactionObject<string>;

    getLpRewardVault(): NonPayableTransactionObject<string>;

    getPriceOracle(): NonPayableTransactionObject<string>;

    getRewardManager(): NonPayableTransactionObject<string>;

    getSafetyRewardVault(): NonPayableTransactionObject<string>;

    getStakingToken(): NonPayableTransactionObject<string>;

    isOwner(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setFeeProviderImpl(_feeProvider: string): NonPayableTransactionObject<void>;

    setGovRewardVault(_address: string): NonPayableTransactionObject<void>;

    setLendingPoolConfiguratorImpl(
      _configurator: string
    ): NonPayableTransactionObject<void>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string
    ): NonPayableTransactionObject<void>;

    setLendingPoolDataProviderImpl(
      _provider: string
    ): NonPayableTransactionObject<void>;

    setLendingPoolImpl(_pool: string): NonPayableTransactionObject<void>;

    setLendingPoolLiquidationManager(
      _manager: string
    ): NonPayableTransactionObject<void>;

    setLendingPoolManager(
      _lendingPoolManager: string
    ): NonPayableTransactionObject<void>;

    setLendingPoolParametersProvider(
      _parametersProvider: string
    ): NonPayableTransactionObject<void>;

    setLendingRateOracle(
      _lendingRateOracle: string
    ): NonPayableTransactionObject<void>;

    setLpRewardVault(_address: string): NonPayableTransactionObject<void>;

    setPriceOracle(_priceOracle: string): NonPayableTransactionObject<void>;

    setRewardManager(_manager: string): NonPayableTransactionObject<void>;

    setSafetyRewardVault(_address: string): NonPayableTransactionObject<void>;

    setStakingToken(_address: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    FeeProviderUpdated(cb?: Callback<FeeProviderUpdated>): EventEmitter;
    FeeProviderUpdated(
      options?: EventOptions,
      cb?: Callback<FeeProviderUpdated>
    ): EventEmitter;

    GovRewardVaultUpdated(cb?: Callback<GovRewardVaultUpdated>): EventEmitter;
    GovRewardVaultUpdated(
      options?: EventOptions,
      cb?: Callback<GovRewardVaultUpdated>
    ): EventEmitter;

    LendingPoolConfiguratorUpdated(
      cb?: Callback<LendingPoolConfiguratorUpdated>
    ): EventEmitter;
    LendingPoolConfiguratorUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolConfiguratorUpdated>
    ): EventEmitter;

    LendingPoolCoreUpdated(cb?: Callback<LendingPoolCoreUpdated>): EventEmitter;
    LendingPoolCoreUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolCoreUpdated>
    ): EventEmitter;

    LendingPoolDataProviderUpdated(
      cb?: Callback<LendingPoolDataProviderUpdated>
    ): EventEmitter;
    LendingPoolDataProviderUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolDataProviderUpdated>
    ): EventEmitter;

    LendingPoolLiquidationManagerUpdated(
      cb?: Callback<LendingPoolLiquidationManagerUpdated>
    ): EventEmitter;
    LendingPoolLiquidationManagerUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolLiquidationManagerUpdated>
    ): EventEmitter;

    LendingPoolManagerUpdated(
      cb?: Callback<LendingPoolManagerUpdated>
    ): EventEmitter;
    LendingPoolManagerUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolManagerUpdated>
    ): EventEmitter;

    LendingPoolParametersProviderUpdated(
      cb?: Callback<LendingPoolParametersProviderUpdated>
    ): EventEmitter;
    LendingPoolParametersProviderUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolParametersProviderUpdated>
    ): EventEmitter;

    LendingPoolUpdated(cb?: Callback<LendingPoolUpdated>): EventEmitter;
    LendingPoolUpdated(
      options?: EventOptions,
      cb?: Callback<LendingPoolUpdated>
    ): EventEmitter;

    LendingRateOracleUpdated(
      cb?: Callback<LendingRateOracleUpdated>
    ): EventEmitter;
    LendingRateOracleUpdated(
      options?: EventOptions,
      cb?: Callback<LendingRateOracleUpdated>
    ): EventEmitter;

    LiquidityRewardVaultUpdated(
      cb?: Callback<LiquidityRewardVaultUpdated>
    ): EventEmitter;
    LiquidityRewardVaultUpdated(
      options?: EventOptions,
      cb?: Callback<LiquidityRewardVaultUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PriceOracleUpdated(cb?: Callback<PriceOracleUpdated>): EventEmitter;
    PriceOracleUpdated(
      options?: EventOptions,
      cb?: Callback<PriceOracleUpdated>
    ): EventEmitter;

    ProxyCreated(cb?: Callback<ProxyCreated>): EventEmitter;
    ProxyCreated(
      options?: EventOptions,
      cb?: Callback<ProxyCreated>
    ): EventEmitter;

    RewardManagerUpdated(cb?: Callback<RewardManagerUpdated>): EventEmitter;
    RewardManagerUpdated(
      options?: EventOptions,
      cb?: Callback<RewardManagerUpdated>
    ): EventEmitter;

    SafetyRewardVaultUpdated(
      cb?: Callback<SafetyRewardVaultUpdated>
    ): EventEmitter;
    SafetyRewardVaultUpdated(
      options?: EventOptions,
      cb?: Callback<SafetyRewardVaultUpdated>
    ): EventEmitter;

    StakingTokenUpdated(cb?: Callback<StakingTokenUpdated>): EventEmitter;
    StakingTokenUpdated(
      options?: EventOptions,
      cb?: Callback<StakingTokenUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FeeProviderUpdated", cb: Callback<FeeProviderUpdated>): void;
  once(
    event: "FeeProviderUpdated",
    options: EventOptions,
    cb: Callback<FeeProviderUpdated>
  ): void;

  once(
    event: "GovRewardVaultUpdated",
    cb: Callback<GovRewardVaultUpdated>
  ): void;
  once(
    event: "GovRewardVaultUpdated",
    options: EventOptions,
    cb: Callback<GovRewardVaultUpdated>
  ): void;

  once(
    event: "LendingPoolConfiguratorUpdated",
    cb: Callback<LendingPoolConfiguratorUpdated>
  ): void;
  once(
    event: "LendingPoolConfiguratorUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolConfiguratorUpdated>
  ): void;

  once(
    event: "LendingPoolCoreUpdated",
    cb: Callback<LendingPoolCoreUpdated>
  ): void;
  once(
    event: "LendingPoolCoreUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolCoreUpdated>
  ): void;

  once(
    event: "LendingPoolDataProviderUpdated",
    cb: Callback<LendingPoolDataProviderUpdated>
  ): void;
  once(
    event: "LendingPoolDataProviderUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolDataProviderUpdated>
  ): void;

  once(
    event: "LendingPoolLiquidationManagerUpdated",
    cb: Callback<LendingPoolLiquidationManagerUpdated>
  ): void;
  once(
    event: "LendingPoolLiquidationManagerUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolLiquidationManagerUpdated>
  ): void;

  once(
    event: "LendingPoolManagerUpdated",
    cb: Callback<LendingPoolManagerUpdated>
  ): void;
  once(
    event: "LendingPoolManagerUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolManagerUpdated>
  ): void;

  once(
    event: "LendingPoolParametersProviderUpdated",
    cb: Callback<LendingPoolParametersProviderUpdated>
  ): void;
  once(
    event: "LendingPoolParametersProviderUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolParametersProviderUpdated>
  ): void;

  once(event: "LendingPoolUpdated", cb: Callback<LendingPoolUpdated>): void;
  once(
    event: "LendingPoolUpdated",
    options: EventOptions,
    cb: Callback<LendingPoolUpdated>
  ): void;

  once(
    event: "LendingRateOracleUpdated",
    cb: Callback<LendingRateOracleUpdated>
  ): void;
  once(
    event: "LendingRateOracleUpdated",
    options: EventOptions,
    cb: Callback<LendingRateOracleUpdated>
  ): void;

  once(
    event: "LiquidityRewardVaultUpdated",
    cb: Callback<LiquidityRewardVaultUpdated>
  ): void;
  once(
    event: "LiquidityRewardVaultUpdated",
    options: EventOptions,
    cb: Callback<LiquidityRewardVaultUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PriceOracleUpdated", cb: Callback<PriceOracleUpdated>): void;
  once(
    event: "PriceOracleUpdated",
    options: EventOptions,
    cb: Callback<PriceOracleUpdated>
  ): void;

  once(event: "ProxyCreated", cb: Callback<ProxyCreated>): void;
  once(
    event: "ProxyCreated",
    options: EventOptions,
    cb: Callback<ProxyCreated>
  ): void;

  once(event: "RewardManagerUpdated", cb: Callback<RewardManagerUpdated>): void;
  once(
    event: "RewardManagerUpdated",
    options: EventOptions,
    cb: Callback<RewardManagerUpdated>
  ): void;

  once(
    event: "SafetyRewardVaultUpdated",
    cb: Callback<SafetyRewardVaultUpdated>
  ): void;
  once(
    event: "SafetyRewardVaultUpdated",
    options: EventOptions,
    cb: Callback<SafetyRewardVaultUpdated>
  ): void;

  once(event: "StakingTokenUpdated", cb: Callback<StakingTokenUpdated>): void;
  once(
    event: "StakingTokenUpdated",
    options: EventOptions,
    cb: Callback<StakingTokenUpdated>
  ): void;
}
